.TH "GraspAlgorithm" 3 "Sun Apr 26 2020" "Max-mean dispersion problem" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GraspAlgorithm \- Esta clase representa el algoritmo GRASP que se va a aplicar, vamos a tener tres fases en el mismo:  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <grasp\-algorithm\&.hpp>\fP
.PP
Inherits \fBAlgorithm\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGraspAlgorithm\fP (int currentLocalSearch, std::string newName, int newIterationsLimit, int noImprovementiterationsLimit)"
.br
.RI "Crea el objeto y le asigna un nombre del algoritmo, además de la búsqueda local seleccionada, el número de iteraciones con y sin mejora\&. "
.ti -1c
.RI "std::string \fBgetAlgorithmName\fP ()"
.br
.RI "Devuelve el nombre del algoritmo\&. "
.ti -1c
.RI "int \fBgetIterationsLimit\fP ()"
.br
.RI "Devuelve el límite de iteraciones\&. "
.ti -1c
.RI "int \fBgetnoImprovementiterationsLimit\fP ()"
.br
.RI "Obtiene el número de iteracions sin mejora\&. "
.ti -1c
.RI "int \fBgetChoosenLocalSearch\fP ()"
.br
.RI "Devuelve la búsqueda local que se ha seleccionado\&. "
.ti -1c
.RI "\fBSolution\fP \fBrun\fP (\fBGraph\fP currentGraph)"
.br
.RI "Este método se encarga de ejecutar el algoritmo grasp, para ello se hace un preprocesamiento, teniendo un conjunto de candidatos\&. Una vez esto, se definen como condiciones de parada las iteraciones con y sin mejora, y luego en cada iteración se va construyendo la solución, se hace la búsqueda local y se asigna al máximo la solución que tenga mayor dispersión media\&. "
.ti -1c
.RI "std::vector< int > \fBpreprocessing\fP (\fBGraph\fP currentGraph)"
.br
.RI "Esta funcion se encarga de hacer el preprocesamiento, para ello, va a escoger los nodos cuyas aristas (todas), sean no negativas, es decir, mayores o iguales a 0\&. "
.ti -1c
.RI "std::vector< int > \fBconstructSolution\fP (std::vector< int > solution, \fBGraph\fP currentGraph)"
.br
.RI "Se encarga de construir la solución, para ello se ha generado un número aleatorio entre el número total de nodos y luego hace tantas iteraciones como de grande sea ese elemento, creando el RCL, luego cogiendo un elemento aleatorio del RCL y por último añadiendo a la solucion\&. "
.ti -1c
.RI "std::vector< int > \fBmakeRCL\fP (std::vector< int > currentSolution, std::vector< int > RCL, \fBGraph\fP currentGraph)"
.br
.RI "Crea el RCL, para ello se le pasa un vector que es del que va a partir para obtener el RCL\&. En nuestro caso, se ha decidido, que se escojan aquellos valores que sean mayores al 60 % del valor máximo\&. "
.ti -1c
.RI "std::vector< int > \fBlocalSearch\fP (std::vector< int > solution, \fBGraph\fP currentGraph)"
.br
.RI "Representa la búsqueda local\&. "
.ti -1c
.RI "std::vector< int > \fBnotSelectedNodes\fP (std::vector< int > checkSelected, int nodeNumber)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Esta clase representa el algoritmo GRASP que se va a aplicar, vamos a tener tres fases en el mismo: 


.IP "\(bu" 2
Preprocesamiento
.IP "\(bu" 2
Construcción
.IP "\(bu" 2
Búsqueda 
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "GraspAlgorithm::GraspAlgorithm (int currentLocalSearch, std::string newName, int newIterationsLimit, int newnoImprovementIterationLimit)"

.PP
Crea el objeto y le asigna un nombre del algoritmo, además de la búsqueda local seleccionada, el número de iteraciones con y sin mejora\&. 
.PP
\fBParameters\fP
.RS 4
\fInewName\fP Nuevo nombre del algoritmo 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "std::vector< int > GraspAlgorithm::constructSolution (std::vector< int > candidates, \fBGraph\fP currentGraph)"

.PP
Se encarga de construir la solución, para ello se ha generado un número aleatorio entre el número total de nodos y luego hace tantas iteraciones como de grande sea ese elemento, creando el RCL, luego cogiendo un elemento aleatorio del RCL y por último añadiendo a la solucion\&. 
.PP
\fBParameters\fP
.RS 4
\fIcurrentSolution\fP Vector del que se parte para construir la solución 
.br
\fItotalNodes\fP Numero total de nodos del grafo 
.RE
.PP
\fBReturns\fP
.RS 4
std::vector <int> Vector con la solución construida 
.RE
.PP

.SS "std::string GraspAlgorithm::getAlgorithmName ()"

.PP
Devuelve el nombre del algoritmo\&. 
.PP
\fBReturns\fP
.RS 4
std::string nombre del algoritmo 
.RE
.PP

.SS "int GraspAlgorithm::getChoosenLocalSearch ()"

.PP
Devuelve la búsqueda local que se ha seleccionado\&. 
.PP
\fBReturns\fP
.RS 4
int Valor de la búsqueda local seleccionda, en caso de que sea 0 es ansiosa y 1 es greedy\&. 
.RE
.PP

.SS "int GraspAlgorithm::getIterationsLimit ()"

.PP
Devuelve el límite de iteraciones\&. 
.PP
\fBReturns\fP
.RS 4
int Valor del límite de iteraciones 
.RE
.PP

.SS "int GraspAlgorithm::getnoImprovementiterationsLimit ()"

.PP
Obtiene el número de iteracions sin mejora\&. 
.PP
\fBReturns\fP
.RS 4
int Devuelve el valor de las iteraciones sin mejora 
.RE
.PP

.SS "std::vector< int > GraspAlgorithm::localSearch (std::vector< int > solution, \fBGraph\fP currentGraph)"

.PP
Representa la búsqueda local\&. 
.PP
\fBParameters\fP
.RS 4
\fIsolution\fP Representa el vector sobre el que vamos a generar la búsqueda local 
.br
\fIcurrentGraph\fP Grafo con la información de las distacias entre nodos 
.RE
.PP
\fBReturns\fP
.RS 4
std::vector <int> Valor del vector 
.RE
.PP

.SS "std::vector< int > GraspAlgorithm::makeRCL (std::vector< int > currentSolution, std::vector< int > candidates, \fBGraph\fP currentGraph)"

.PP
Crea el RCL, para ello se le pasa un vector que es del que va a partir para obtener el RCL\&. En nuestro caso, se ha decidido, que se escojan aquellos valores que sean mayores al 60 % del valor máximo\&. 
.PP
\fBParameters\fP
.RS 4
\fIRCL\fP Vector del que se va a hallar el RCL 
.RE
.PP
\fBReturns\fP
.RS 4
std::vector <int> Nuevo RCL que se ha creado 
.RE
.PP

.SS "std::vector< int > GraspAlgorithm::preprocessing (\fBGraph\fP currentGraph)"

.PP
Esta funcion se encarga de hacer el preprocesamiento, para ello, va a escoger los nodos cuyas aristas (todas), sean no negativas, es decir, mayores o iguales a 0\&. 
.PP
\fBParameters\fP
.RS 4
\fIcurrentGraph\fP Representa el grafo con las distancias entre los nodos\&. 
.RE
.PP
\fBReturns\fP
.RS 4
std::vector <int> Representa un vector con el resultado del preprocesamiento 
.RE
.PP

.SS "\fBSolution\fP GraspAlgorithm::run (\fBGraph\fP currentGraph)\fC [virtual]\fP"

.PP
Este método se encarga de ejecutar el algoritmo grasp, para ello se hace un preprocesamiento, teniendo un conjunto de candidatos\&. Una vez esto, se definen como condiciones de parada las iteraciones con y sin mejora, y luego en cada iteración se va construyendo la solución, se hace la búsqueda local y se asigna al máximo la solución que tenga mayor dispersión media\&. 
.PP
\fBParameters\fP
.RS 4
\fIcurrentGraph\fP Representa el grafo actual 
.RE
.PP
\fBReturns\fP
.RS 4
\fBSolution\fP Solucion del problema 
.RE
.PP

.PP
Implements \fBAlgorithm\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max-mean dispersion problem from the source code\&.
